# -*- coding: utf-8 -*-
"""Almitas Peludas App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xwQ4rnOjRsCBIqhFZvWqqK47aTQYDaSQ
"""

import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog

class AlmitasPeludasApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Almitas Peludas")
        self.geometry("400x600")

        # Datos del perro. Usamos un diccionario para simular una base de datos simple.
        self.datos_perro = {}

        # Contenedor para las pantallas
        self.frame_actual = None

        self.mostrar_inicio()

    def limpiar_pantalla(self):
        """Funci√≥n para limpiar la pantalla actual antes de mostrar una nueva."""
        if self.frame_actual:
            self.frame_actual.destroy()

    def mostrar_inicio(self):
        """Muestra la pantalla inicial con los botones de 'Almitas Peludas' y 'Local'."""
        self.limpiar_pantalla()
        self.frame_actual = tk.Frame(self)
        self.frame_actual.pack(pady=50)

        tk.Label(self.frame_actual, text="¬øD√≥nde est√°s trabajando?", font=("Arial", 16)).pack(pady=20)

        btn_almitas = tk.Button(self.frame_actual, text="üêæ Almitas Peludas", font=("Arial", 14), command=lambda: self.mostrar_registro_perro("Almitas Peludas"))
        btn_almitas.pack(pady=10, ipadx=20, ipady=10)

        btn_local = tk.Button(self.frame_actual, text="üè¢ Local", font=("Arial", 14), command=lambda: self.mostrar_registro_perro("Local"))
        btn_local.pack(pady=10, ipadx=20, ipady=10)

    def mostrar_registro_perro(self, lugar):
        """Muestra la pantalla para registrar el nombre y el lugar de trabajo."""
        self.limpiar_pantalla()
        self.datos_perro = {"Lugar": lugar}

        self.frame_actual = tk.Frame(self)
        self.frame_actual.pack(pady=50)

        tk.Label(self.frame_actual, text=f"Registrando en {self.datos_perro['Lugar']}", font=("Arial", 16)).pack(pady=10)

        tk.Label(self.frame_actual, text="Nombre del perro:", font=("Arial", 12)).pack()
        self.nombre_entry = tk.Entry(self.frame_actual, font=("Arial", 12))
        self.nombre_entry.pack(pady=5)

        btn_siguiente = tk.Button(self.frame_actual, text="Siguiente", command=self.mostrar_detalles)
        btn_siguiente.pack(pady=20, ipadx=10, ipady=5)

    def mostrar_detalles(self):
        """Muestra los botones para registrar los detalles del perro."""
        nombre = self.nombre_entry.get()
        if not nombre:
            messagebox.showerror("Error", "Por favor, ingresa el nombre del perro.")
            return

        self.datos_perro["Nombre"] = nombre

        self.limpiar_pantalla()
        self.frame_actual = tk.Frame(self)
        self.frame_actual.pack(pady=20)

        tk.Label(self.frame_actual, text=f"Detalles de {self.datos_perro['Nombre']}", font=("Arial", 16)).pack(pady=10)

        # Botones para los detalles del perro
        tk.Button(self.frame_actual, text="Raza üêï‚Äçü¶∫", command=lambda: self.actualizar_dato("Raza")).pack(pady=5, ipadx=10, ipady=5)
        tk.Button(self.frame_actual, text="Edad üë¥", command=lambda: self.actualizar_dato("Edad")).pack(pady=5, ipadx=10, ipady=5)
        tk.Button(self.frame_actual, text="Nudos üß∂", command=lambda: self.actualizar_dato("Nudos")).pack(pady=5, ipadx=10, ipady=5)
        tk.Button(self.frame_actual, text="U√±as üíÖ", command=lambda: self.actualizar_dato("U√±as")).pack(pady=5, ipadx=10, ipady=5)
        tk.Button(self.frame_actual, text="Estado general ‚ù§Ô∏è‚Äçü©π", command=lambda: self.actualizar_dato("Estado General")).pack(pady=5, ipadx=10, ipady=5)

        btn_finalizar = tk.Button(self.frame_actual, text="Finalizar Registro", command=self.finalizar_registro)
        btn_finalizar.pack(pady=20, ipadx=15, ipady=7)

    def actualizar_dato(self, tipo):
        """Pide y guarda un dato seg√∫n el tipo seleccionado."""
        valor = None

        if tipo == "Raza":
            valor = simpledialog.askstring("Raza", "Ingresa la raza del perro:", parent=self)
        elif tipo == "Edad":
            valor = simpledialog.askinteger("Edad", "Ingresa la edad (en a√±os):", minvalue=0, maxvalue=30, parent=self)
        elif tipo == "Nudos":
            si = messagebox.askyesno("Nudos", "¬øTiene nudos?", parent=self)
            valor = "S√≠" if si else "No"
        elif tipo == "U√±as":
            si = messagebox.askyesno("U√±as", "¬øRequiere corte de u√±as?", parent=self)
            valor = "Requiere corte" if si else "No requiere"
        elif tipo == "Estado General":
            valor = simpledialog.askstring("Estado general", "Describe el estado general (e.g., Excelente/Bueno/Regular/Malo):", parent=self)

        # Si el usuario cancel√≥, no hacer nada
        if valor in (None, ""):
            return

        self.datos_perro[tipo] = valor
        messagebox.showinfo("Dato registrado", f"{tipo}: {valor}")

    def finalizar_registro(self):
        """Muestra el resumen de los datos y los 'guarda'."""
        self.limpiar_pantalla()
        self.frame_actual = tk.Frame(self)
        self.frame_actual.pack(pady=50)

        tk.Label(self.frame_actual, text="¬°Registro Finalizado!", font=("Arial", 16, "bold")).pack(pady=20)

        resumen = f"Lugar: {self.datos_perro.get('Lugar', 'N/A')}\n"
        resumen += f"Nombre: {self.datos_perro.get('Nombre', 'N/A')}\n"
        # Agregar din√°micamente el resto de los datos capturados
        for clave, valor in self.datos_perro.items():
            if clave not in ("Lugar", "Nombre"):
                resumen += f"{clave}: {valor}\n"
        tk.Label(self.frame_actual, text=resumen, font=("Arial", 12)).pack(pady=10)

        # Simula el guardado de datos
        print("Datos registrados:", self.datos_perro)

        tk.Button(self.frame_actual, text="Volver al inicio", command=self.mostrar_inicio).pack(pady=20, ipadx=10, ipady=5)

if __name__ == "__main__":
    app = AlmitasPeludasApp()
    app.mainloop()